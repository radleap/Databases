CREATE TABLE customer (
	customer_id varchar PRIMARY KEY,
	customer_name varchar,
	segment varchar,
	age int,
	country varchar,
	city varchar,
	state varchar,
	postal_code bigint,
	region varchar);
	
CREATE TABLE product (
	product_id varchar PRIMARY KEY,
	category varchar,
	sub_category varchar,
	product_name varchar);
	
CREATE TABLE sales (
	order_line int PRIMARY KEY,
	order_id varchar,
	order_date date,
	ship_date date,
	ship_mode varchar,
	customer_id varchar,
	product_id varchar, 
	sales numeric,
	quantity int,
	discount numeric,
	profit numeric);

COPY customer FROM 'C:\Program Files\PostgreSQL\13\data\data_ben\Customer.csv' CSV HEADER;
COPY product FROM 'C:\Program Files\PostgreSQL\13\data\data_ben\Product.csv' CSV HEADER;
COPY sales FROM 'C:\Program Files\PostgreSQL\13\data\data_ben\Sales.csv' CSV HEADER;

SELECT * FROM product;

-------------- IN CONDITION FOR MULTIPLE CONDITIONS ----------------- 
SELECT * FROM customer WHERE city IN ('Philadelphia','Seattle');
SELECT * FROM customer WHERE city='Philadelphia' OR city='Seattle';
-------------- BETWEEN CONDITION  ----------------------------------- 
SELECT * FROM customer WHERE age BETWEEN 20 AND 30;
SELECT * FROM customer WHERE age >=20 AND <= 30;
SELECT * FROM customer WHERE age NOT BETWEEN 20 and 30;
SELECT * FROM sales WHERE ship_date BETWEEN '2015-04-01' AND '2016-04-01';
-------------- LIKE CONDITION  ----------------------------------- 
-- used for pattern matching and as a wildcard
-- wildecard is % match any length including zero length
-- the underscore _ allows you to match on a single character
-- A% means starts with A
-- %A means ends with A
-- A%B means starts with A and ends with B
-- AB_C means string starts with AB, there is 1 character, and then C
-- space and zero and considered as character
SELECT * FROM customer WHERE customer_name LIKE 'J%'; -- only capital J
SELECT * FROM customer WHERE customer_name LIKE '%Nelson%';
SELECT * FROM customer WHERE customer_name LIKE '____ %'; --first name 4 characters
SELECT DISTINCT city FROM customer WHERE city NOT LIKE 'S%';
--escape character want the %
SELECT * FROM customer WHERE customer_name LIKE 'G\%';

------------------------- ORDER BY, LIMIT ----------------------------
SELECT * FROM customer WHERE state = 'California' ORDER BY customer_name;
SELECT * FROM customer ORDER BY city ASC , customer_name DESC;
SELECT * FROM customer ORDER BY 2 DESC; --uses second column

SELECT * FROM customer LIMIT 8; --returns only 8 records
SELECT * FROM sales WHERE discount > 0 ORDER BY discount LIMIT 10;

------------------------------- Alias ---------------------------------
SELECT customer_id AS "Serial number", 
customer_name as Name, 
age as Customer_age FROM customer;

----------------------- Aggregate Commands COUNT ----------------------

-- counts # of non-null values
SELECT * FROM sales;
SELECT COUNT(*) FROM sales; --all non-null rows in sales
SELECT COUNT(order_line) as "Number of Products Ordered", 
COUNT(DISTINCT(order_id)) AS "Number of Orders" 
FROM sales WHERE customer_id ='CG-12520';

----------------------- Aggregate Commands SUM ----------------------

SELECT SUM(profit) AS "Total Profit" FROM sales;
SELECT SUM(quantity) AS "Total Quantity" FROM sales WHERE product_id  = 'FUR-TA-10000577';

----------------------- Aggregate Commands AVG ----------------------
SELECT AVG(age) AS "Customer Avg Age" FROM customer;
SELECT AVG(sales * 0.01) AS "Average Commission Value" FROM sales;

----------------------- Aggregate Commands Min and Max ----------------------
SELECT MIN(sales) AS Min_Sales FROM sales
WHERE order_date BETWEEN '2015-06-01' AND '2015-06-30';

SELECT sales FROM sales 
WHERE order_date BETWEEN '2015-06-01' AND '2015-06-30'
ORDER BY sales ASC;

SELECT MAX(sales) AS Max_Sales FROM sales
WHERE order_date BETWEEN '2015-06-01' AND '2015-06-30';
SELECT SUM(sales) from sales;
SELECT * FROM customer LIMIT 5;
SELECT COUNT(*) AS Total_cust FROM customer 
WHERE age BETWEEN 20 and 30 AND region ='South';

SELECT AVG(age) AS "Customer Avgf age" FROM customer WHERE region = 'South';
SELECT MIN(age), MAX(age) FROM customer WHERE city = 'Philadelphia';

----------------------------- GROUP BY -------------------------------
SELECT region, COUNT(customer_id) AS customer_count FROM customer
GROUP BY region;
SELECT product_id, SUM(quantity) AS quantity_sold FROM sales
GROUP BY product_id ORDER BY quantity_sold DESC;

SELECT customer_id, 
MIN(sales) AS MinSales, 
MAX(sales) AS MaxSales, 
AVG(sales) AS AvgSales,
SUM(sales) AS TotalSales 
FROM sales GROUP by customer_id ORDER BY TotalSales DESC LIMIT 5;

SELECT region, state, avg(age) as Avgage, COUNT(customer_id) as customer_count
FROM customer GROUP BY region, state;

-------------------------- HAVING ---------------------------------
--used with GROUP BY to restrict groups of returned rows to only
-- those whose condition is TRUE
-- having is for aggregate functions, not rows
SELECT region, COUNT(customer_id) AS customer_count 
FROM customer GROUP BY region HAVING COUNT(customer_id)>200;

SELECT region, COUNT(customer_id) AS customer_count FROM customer
WHERE customer_name LIKE 'A%' GROUP BY region
HAVING COUNT(customer_id)>15;

SELECT * FROM sales;

SELECT SUM(sales),SUM(Quantity), COUNT(DISTINCT(order_id)),
MAX(sales), MIN(sales), AVG(sales) FROM sales;

SELECT product_id, SUM(quantity) FROM sales GROUP BY product_id
HAVING sum(quantity)>10;

----------------------------- CASE ---------------------------------
--similar to if else (case is like if), END
-- CASE WHEN result WHEN result WHEN results ELSE result END
-- when you want to assign categories to data
SELECT *, CASE
WHEN age >30 THEN 'Young'
WHEN age>60 THEN 'Senior Citizen'
ELSE 'Middle aged' END AS Age_category 
FROM customer; 

----------------------------- CREATING TABLE FOR JOINS ---------------------------------
-- CREATE A TABLE FROM EXISTING TABLE USING SUBQUERY
CREATE TABLE sales_2015 AS 
SELECT * FROM sales WHERE ship_date BETWEEN '2015-01-01' AND
'2015-12-31';
SELECT COUNT(*) FROM sales_2015; --2131
SELECT COUNT(DISTINCT customer_id) FROM sales_2015; --578

CREATE TABLE customer_20_60 AS
SELECT * FROM customer WHERE age BETWEEN 20 AND 60;
SELECT COUNT(*) FROM customer_20_60; --597

------------------------ INNER JOINS ----------------------------
--INTERSECTION OF THE KEY USED
--sales_2015
--customer_20_60
SELECT a.order_line, a.product_id, a.customer_id, a.sales,
b.customer_name, b.age FROM sales_2015 AS a
INNER JOIN customer_20_60 AS b
ON a.customer_id = b.customer_id
ORDER BY customer_id;

SELECT customer_id FROM sales_2015 ORDER BY customer_id;
SELECT customer_id FROM customer_20_60 ORDER BY customer_id;

-------------------------- LEFT JOIN ---------------------------
-- RETURN ALL VALUES FROM LEFT JOIN TALBE EVEN IF NONE IN OTHER
-- AND THE OVERLAPS FROM B as well

SELECT a.order_line, a.product_id, a.customer_id, a.sales,
b.customer_name, b.age FROM sales_2015 AS a
LEFT JOIN customer_20_60 AS b
ON a.customer_id = b.customer_id
ORDER BY customer_id; -- will have 10315 and 10375 not 10480

-------------------------- LEFT JOIN ---------------------------
-- RETURN ALL VALUES FROM RIGHT JOIN TALBE EVEN IF NONE IN OTHER
-- AND THE OVERLAPS FROM A as well
SELECT a.order_line, a.product_id, b.customer_id, a.sales,
b.customer_name, b.age FROM sales_2015 AS a
RIGHT JOIN customer_20_60 AS b
ON a.customer_id = b.customer_id
ORDER BY customer_id; -- 10315 not , 10375 yes, 10480 yes BUT IS NOT ON THE RIGHT HALF

--------------------------- FULL JOIN --------------------------
--get results of both tables

SELECT a.order_line, a.product_id, a.customer_id, a.sales,
b.customer_id, b.customer_name, b.age FROM sales_2015 AS a
FULL JOIN customer_20_60 AS b
ON a.customer_id = b.customer_id
ORDER BY a.customer_id;

---------------------------- CROSS JOIN -------------------------
-- NOT same syntax, creates a cartesian product between 2 data sets
-- good for repetitive data 
--creating month/year tables for example
CREATE TABLE month_values (MM integer);
CREATE TABLE year_values (YYYY integer);

INSERT INTO month_values VALUES (1),(2),(3),(4),(5),(6),
(7),(8),(9),(10),(11),(12);
INSERT INTO year_values VALUES (2011),(2012),(2013),(2014),(2015),
(2016),(2017),(2018),(2019);
SELECT * FROM month_values;
SELECT * FROM year_values;

SELECT a.YYYY, b.MM FROM year_values AS a, month_values AS b
ORDER BY a.YYYY, b.MM;

---------------------------- EXCEPT --------------------------
-- used to return all rows in the first SELECT statement that
-- are not returned by the second select statement
-- REMOVES ROWS IN THE SECOND SELECT STATEMENT
-- similar to venn diagram A NOT B

SELECT customer_id FROM sales_2015 
EXCEPT SELECT customer_id FROM customer_20_60 ORDER BY 
customer_id;

---------------------------- UNION ------------------------------
-- used to combine the result sets of 2 or more select statements
-- removes ducplicate rows between various select statements
-- should have the same data types and expressions 
-- can specify multiple

--
SELECT customer_id FROM sales_2015 UNION
SELECT customer_id FROM customer_20_60 ORDER BY customer_id;

--examples
SELECT * FROM sales_2015;
SELECT * FROM customer_20_60;

SELECT SUM(a.sales) as Total, b.state FROM sales_2015 AS a
INNER JOIN customer_20_60 AS b ON 
a.customer_id = b.customer_id GROUP BY b.state ORDER BY Total DESC;

--example
SELECT * FROM sales;
SELECT * FROM product;

SELECT SUM(s.sales) AS Total_sales, SUM(s.quantity) AS Total_QTY,
p.product_name FROM
sales AS s INNER JOIN product as p ON
s.product_id=p.product_id GROUP BY p.product_name
ORDER BY Total_sales;

---------------------------------- Subqueries ----------------------------------------
-- a query within a query, saves resources
-- can reside in WHERE/IN clause, FROM clause, or SELECT clause
-- think of as a table already created that access with joins, or a lookup table with IN
-- must enclose in parenthesis
-- BETWEEN can be used with a subquery BUT not within a subquery
SELECT * FROM sales WHERE customer_id IN 
	(SELECT DISTINCT customer_id FROM customer WHERE age > 60);

-- FROM 
SELECT a.product_id, a.product_name,a.category, b.quantity FROM product as a
LEFT JOIN 
(SELECT product_id, SUM(quantity) AS quantity FROM sales GROUP BY product_id) AS b
ON a.product_id = b.product_id ORDER BY b.quantity DESC;

-- SELECT (only one column in the SELECT clause)
SELECT customer_id, order_line,
	(SELECT customer_name FROM customer WHERE sales.customer_id = customer.customer_id)
FROM sales ORDER BY customer_id;

--ex 
SELECT * FROM sales LIMIT 5;
SELECT * FROM customer LIMIT 5;
SELECT * FROM product LIMIT 5;

SELECT s.profit, c.customer_name,c.age, p.product_name, p.category FROM sales AS s
INNER JOIN (SELECT customer_id, customer_name, age FROM customer) AS c ON s.customer_id=c.customer_id
INNER JOIN (SELECT product_id, product_name, category FROM product) AS p ON s.product_id=p.product_id;

----------------------------------- Views  -----------------------------------
-- View is not a physical table, it is a virtual table 
-- created by a query joining one or more tables
-- ease of use, space savings, and data security
-- give access so users only look at what they need
-- CREATE OR REPLACE VIEW can be used instead of just CREATE View
-- "CREATE OR REPLACE VIEW" updates or replaces
-- recommend updating tables not views.

CREATE VIEW logistics AS
SELECT a.order_line, a.order_id, b.city, b.state, b.country
FROM sales AS a LEFT JOIN customer AS b ON a.customer_id=b.customer_id
ORDER BY a.order_line;

SELECT * FROM logistics; 

DROP VIEW logistics; -- to delete

-------------------------------------- INDEXES ----------------------------------------
-- performance gaining method allowing faster retrieval of records
-- an index creates an entry for each value that appears in the indexed columns
-- like an index in a book 
-- simple index = 1 column; composity index = >1 columns
-- con is it takes longer to update the table
-- build only when necessary

CREATE INDEX mon_idx ON month_values(MM); -- usually _idx nomenclature
--automatically go and update/change index
DROP INDEX IF EXISTS mon_idx;   -- CASCADE deletes dependent objects; restrict block the deletion and get error
ALTER INDEX IF EXISTS mon_idx RENAME TO month_idx;


--------------------------------- PARTITION AND RANKING ---------------------------------
-- ROW_NUMBER() OVER(PARTITION BY ____ ORDER BY ______) AS _____ FROM _____;
-- https://learnsql.com/cookbook/how-to-select-the-first-row-in-each-group-by-group/
SELECT order_date, ship_mode, 
ROW_NUMBER() OVER(PARTITION BY ship_mode ORDER BY order_date) AS RANK
FROM sales;

SELECT COUNT(*) FROM sales;
SELECT * FROM sales;

WITH blah AS (SELECT order_date, ship_mode, 
ROW_NUMBER() OVER(PARTITION BY ship_mode ORDER BY order_date) AS rank
FROM sales)
SELECT * FROM blah WHERE rank <3 

--ex
--CREATE A VIEW containing order_line, product_id, sales,discount
-- and the value of the first order date in the sales table and name the view Daily_Billing
--CREATE OR REPLACE VIEW Daily_Billing

--using the primary key order_line is needed for unique entries
-- partitioning creating the rank field based on the order date, partitioned by product_id
CREATE VIEW Daily_Billing AS
WITH r AS (SELECT order_date, product_id, order_line, 
ROW_NUMBER() OVER(PARTITION BY product_id ORDER BY order_date) AS rank
FROM sales)
SELECT r.*, s.sales, s.discount FROM r  
LEFT JOIN sales as s ON s.order_line = r.order_line
WHERE r.rank <3 ORDER BY r.product_id, r.rank;

SELECT * FROM Daily_Billing;
DROP VIEW Daily_Billing;
--------------------------------String functions --------------------------------------
------------------------------------ LENGTH -------------------------------------------
-- returns the length of a string, expressed as the number of characters
-- useful when sms lengths matter
SELECT Customer_name, LENGTH(Customer_name) as character_num
FROM customer WHERE age > 30;
------------------------------------ UPPER LOWER -------------------------------------------
-- used to convert the case to lower or upper
-- useful when matching strings
SELECT UPPER('Eat the Burger');
SELECT LOWER('Eat the Burger');
------------------------------------  REPLACE  -------------------------------------------
-- used to replace characters, in a string, with other characters
-- replace(string or column, from_substring, to sub_string)
-- THIS IS CASE SENSITIVE (if united instead of )
SELECT customer_name, country,
REPLACE(country,'United States','US') AS country_new
FROM customer;

SELECT customer_name, country,
REPLACE(LOWER(country),'united States','US') AS country_new -- not replace need UPDATE TABLE command otherwise
FROM customer;
------------------------------------  TRIM  -------------------------------------------
-- TRIM, RTRIM, LTRIM
-- trim() can do either Rtrim or Ltrim using the leading or trailing
-- trim([leading|trailing|both] [trim_character] from string)
-- rtrim(string, trim_character) ... same for ltrim
-- mainly used to clean data (such as of spaces) for matching strings
-- whenever matching columns on strings without standardized data

SELECT TRIM(LEADING ' ' FROM '     Eat the burger      ');
SELECT TRIM(TRAILING ' ' FROM '     Eat the burger      ');
SELECT TRIM(BOTH ' ' FROM '     Eat the burger      ');
SELECT TRIM('     Eat the burger      ');
SELECT RTRIM('     Eat the burger      ', ' ');
SELECT LTRIM('     Eat the burger      ', ' ');

------------------------------------  || concatenation ------------------------------------
-- || operator allows you to concatenate 2 or more strings together
-- string1 || string2 || string_n
-- piping operator

SELECT customer_name, city || ', ' || state || ', ' || country as address
FROM customer;

------------------------------------  substring  ------------------------------------
-- to extract a substring from a string
-- substring( string [FROM start_position] [FOR length])

-- not need FROM if the start
SELECT customer_id, customer_name, SUBSTRING(customer_id FOR 2) AS cust_group
FROM customer

SELECT customer_id, customer_name, SUBSTRING(customer_id FOR 2) AS cust_group
FROM customer WHERE SUBSTRING(customer_id FOR 2) ='AB';

SELECT customer_id, customer_name,
SUBSTRING(customer_id FROM 4 FOR 5) AS cust_num
FROM customer 
WHERE SUBSTRING(customer_id FOR 2)='AB';

----------------------------- String Aggregator -----------------------------------
-- concatentes input values into a strong, separated by delimiter
-- STRING_AGG(expression, delimiter)
-- || is used for different columns
-- STRING_AGG is used for different values IN a column

-- in sales table orders with multiple product_ids ... this gets all in a row
SELECT order_id, STRING_AGG(product_id, ',') AS All_products
FROM sales GROUP BY order_id;


-- ex
-- max product name legnth
SELECT * FROM product;
SELECT product_name, LENGTH(product_name) AS char_length 
FROM product ORDER BY char_length DESC;
SELECT MAX(LENGTH(product_name)) FROM product;
--ex
SELECT product_name, sub_category, category,
product_name||sub_category||category AS product_details
FROM product;
--ex
SELECT product_id FROM product;
SELECT product_id,
SUBSTRING(product_id FOR 3) AS one,
SUBSTRING(product_id FROM 5 FOR 2) AS two,
SUBSTRING(product_id FROM 8) AS three
FROM product;
--ex list comma sep product name where sub_cat is either chairs or tables
SELECT * FROM product;
SELECT sub_category, STRING_AGG(product_name,',') AS Conn
FROM product 
WHERE sub_category ='Chairs' OR sub_category ='Tables' GROUP BY sub_category
;

-------------------------------- Mathematical Functions -----------------------------------
-------------------------------------  CEIL & FLOOR ---------------------------------------
-- CEIL() returns the smallest integer value that is greater than a number
-- FLOOR() returns the largest integer value that is less than a number

SELECT order_line, sales, CEIL(sales),FLOOR(sales) 
FROM sales WHERE discount >0;

-------------------------------------  RANDOM ---------------------------------------
-- generates a random number between 0 and 1; including 0 not 1
-- often want a different range, so need 10-20
-- random decimal -- SELECT RANDOM()*(20-10)+10 for range of 10 to 20 with decimals
-- random integer -- SELECT FLOOR(RANDOM()*(b-a+1))+a -- range of integer 10 to 20 

SELECT RANDOM(), 
RANDOM() * (50-10) + 10, --decimal btw 10 and 50
FLOOR(RANDOM() * (50-10)+10) --integer btw 10 and 50

-------------------------------------  SETSEED ---------------------------------------
-- if set, the random function will return a repeatable sequence of random numbers that
-- is derived from the seed
-- SETSEED(seed) ... can be between 1.0 and -1.0 inclusive
SELECT SETSEED(0.5);
SELECT RANDOM(); --0.24991 first after the set seed is always the same
SELECT RANDOM(); -- will be different since second execution

-------------------------------------  ROUND ---------------------------------------
-- rounds a number to a certain number of decimal, nearest integer value
-- ROUND(number)
SELECT order_line, sales, ROUND(sales) FROM sales;

-------------------------------------  POWER ---------------------------------------
-- gives m to the power n
-- POWER(m,n)

SELECT POWER(6,2);
SELECT age, POWER(age,2) FROM customer ORDER BY age;

-- ex five randomly picked customers

SELECT customer_id, RANDOM() as random_n FROM customer ORDER BY random_n LIMIT 5;

-------------------------------------  CURRENT DATE & TIME ---------------------------------------
-- CURRENT_DATE function returns the current data. 'YYYY-MM-DD'
-- CURRENT_TIME function returens the current time with the local time zone. 'HH:MM:SS.GMT+TZ'
-- CURRENT_TIMESTAMP function returns the current date and time
-- with the localtime zone.'YYYY-MM-DD HH:MM:SS.GMT+TZ'
-- Useful when inserting new rows, so each order has the order date; figure out age of person.

SELECT CURRENT_DATE, CURRENT_TIME, CURRENT_TIME(1), CURRENT_TIMESTAMP;
-- the (1) on CURRENT_TIME is the precision of the seconds, 1 decimal point only

-------------------------------------  AGE ---------------------------------------
-- AGE function returns the number of years, months, and days between two dates
-- AGE(Date1,Date2) ... if date1 is not provided the current date will be used

SELECT age('2014-04-25', '2014-01-01');

SELECT order_line, ship_date, order_date, 
AGE(ship_date,order_date) AS TimeTaken
FROM sales ORDER BY TimeTaken DESC;

-------------------------------------  EXTRACT ---------------------------------------
-- EXTRACT function extracts parts from a date
-- EXTRACT('unit' FROM 'date')
-- Types: day, decade, doy, epoch, hour, minute, month, second, year .. others as well
-- EPOCH is seconds since '1970-01-01 00:00:00 UTC'

SELECT EXTRACT(DAY FROM CURRENTDATE,);
SELECT CURRENT_TIMESTAMP, EXTRACT(HOUR FROM CURRENT_TIMESTAMP);

SELECT order_date, ship_date,
EXTRACT(EPOCH FROM (ship_date - order_date)) FROM sales; -- will error bc shidate-ordedate gives an integer

SELECT order_date, ship_date,
EXTRACT(EPOCH FROM ship_date) - EXTRACT(EPOCH FROM order_date) --gives seconds
FROM sales;

--ex
SELECT EXTRACT(day FROM TO_DATE('1939-04-06','YYY-MM-DD'));
SELECT AGE(CURRENT_DATE, TO_DATE('1939-04-06','YYY-MM-DD')); -- Age of batman haha

--ex monthly sales of subcateorgy for chairs
SELECT * FROM sales;
SELECT * FROM product; -- PK is product_id

SELECT SUM(s.sales) AS SalesByMonth,
EXTRACT(MONTH from s.order_date) AS month
FROM sales AS s 
LEFT JOIN product AS p ON s.product_id = p.product_id
WHERE p.sub_category = 'Chairs'
GROUP BY month ORDER BY month ASC;

---------------------------------------- PATTERN MATCHING ------------------------------------
-- LIKE, SIMILAR TO, ~(Regular Expressions)
-- use LIKE for simpler queries and RegEx for more complex
-- AVOID using SIMILAR TO, uses REGEX internally and is slow option
-- wildcards of LIKE statements and REGEX are different
-- like perform on the whole string, whereas regex just part if needed
--Like wildcards % (match any string of any length), _ for a single character

SELECT * FROM sales WHERE ship_mode LIKE 'Se%';
SELECT * FROM sales WHERE ship_mode NOT LIKE 'Se%';

---------------------------------------- ADANCED PATTERN MATCHING (RegEx) ---------------------
-- | is either of two alternatives
-- * repition of the previous item zero or more times
-- + repition of the previous item one of more times
-- ? Denotes repition of the previous item zero or one time
-- {m} denotes repition of the previous item exactly m times
-- {m,} denotes repition of the previous item m or more times
-- {m,n} denotes the repotion of the previous item at least m and not more than n times
-- ^,$ ... ^ denotes the start of the string, $ denotes the end of string
-- [chars] a bracket expression, matching any one of the characters
-- ~* ... ~ means case sensitive, ~* means case insensitive

create table users(id serial primary key, name character varying);

insert into users (name) VALUES 
('Alex'), ('Jon Snow'), ('Christopher'), ('Arya'),('Sandip Debnath'), ('Lakshmi'),
('alex@gmail.com'),('@sandip5004'), ('lakshmi@gmail.com');

SELECT * FROM users;
-- all customers with a start, and then anything after using [a-z\s], \s denotes space also
-- the + following [a-z/s] for other positions as well, and the end of string is $
SELECT * FROM customer WHERE customer_name ~*'^a+[a-z\s]+$'; -- ^ start of string
--name starts with a-d
SELECT * FROM customer WHERE customer_name ~*'^(a|b|c|d)+[a-z\s]+$' 
-- name starts with a-d, followed by 3 letters, followed by a space, then 4 letters
SELECT * FROM customer WHERE customer_name ~*'^(a|b|c|d)[a-z]{3}\s[a-z]{4}$'
SELECT * FROM customer WHERE customer_name ~*'^(a|b|c|d)+[a-z]{3}\s[a-z]{4}$' --not difference here
-- getting emails
-- allows any case, first [] allows any number/letter/./-/_ 
-- followed by the @ symbol, followed by [] any letter/number/- 
-- followed by . followed by [] of any letter length 3-5
-- + does not concatenate it is any number of previous [] 
SELECT * FROM users WHERE name ~*'[a-z0-9\.\-\_]+@[a-z0-9\-]+\.[a-z]{3,5}';
SELECT * FROM users WHERE name ~*'^[a-z0-9\.\-\_]+@[a-z0-9\-]+\.[a-z]{2,5}$'; --same

DROP TABLE users;
--ex
--find all customers who have first name and last name of 5 charactaer each 
--and last name starts with a/b/c/d
SELECT * FROM customer WHERE customer_name ~*'^[a-z]{5}\s(a|b|c|d){1}[a-z]{4}$'

-- CREATE zipcode table and insert data 234432,23345,sdfe4,123&3,67424,7895432,12312
-- find all valid zipcodes from this table (5 or 6 number characers)
CREATE TABLE zipcode (zip varchar);
INSERT INTO zipcode (zip) VALUES
(234432),(23345),('sdfe4'),('123&3'),(67424),(7895432),(12312);
SELECT * FROM zipcode;
SELECT * FROM zipcode WHERE zip ~'^[0-9]{5,6}$';

-------------------------------------- DATA TYPE CONVERSION ------------------------------------



